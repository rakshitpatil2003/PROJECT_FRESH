import React, { useState, useEffect, useMemo } from 'react';
import axios from 'axios';
import ReactECharts from 'echarts-for-react';
import { 
  Box, 
  Typography, 
  Paper, 
  Table, 
  TableContainer, 
  TableHead, 
  TableBody, 
  TableRow, 
  TableCell,
  Chip,
  Grid,
  Link,
  Dialog,
  DialogTitle,
  DialogContent,
  IconButton,
  CircularProgress,
  Pagination,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  Card,
  CardContent,
  Tabs,
  Tab
} from '@mui/material';
import CloseIcon from '@mui/icons-material/Close';
import { parseLogMessage } from '../utils/normalizeLogs';

// Define API URL from environment or default
const API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000';

const VulnerabilityDetection = () => {
  // State variables
  const [logs, setLogs] = useState([]);
  const [allLogs, setAllLogs] = useState([]); // Store all logs for visualization
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedLog, setSelectedLog] = useState(null);
  const [page, setPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalPages, setTotalPages] = useState(1);
  const [activeTab, setActiveTab] = useState(0);

  // Fetch logs from API
  useEffect(() => {
    const fetchVulnerabilityLogs = async () => {
      try {
        setLoading(true);
        
        // Fetch paginated logs for the table
        const response = await axios.get(`${API_URL}/api/logs/vulnerability`, {
          params: {
            page: page,
            limit: rowsPerPage
          }
        });
        
        // Parse logs through our normalization function
        const normalizedLogs = response.data.logs.map(log => parseLogMessage(log));
        
        setLogs(normalizedLogs);
        // Calculate total pages based on response
        setTotalPages(Math.ceil(response.data.total / rowsPerPage) || 1);
        
        // Fetch all logs for visualization (with a higher limit or no pagination)
        const allLogsResponse = await axios.get(`${API_URL}/api/logs/vulnerability`, {
          params: {
            limit: 1000 // Adjust based on your data size
          }
        });
        
        const allNormalizedLogs = allLogsResponse.data.logs.map(log => parseLogMessage(log));
        setAllLogs(allNormalizedLogs);
        
        setError(null);
      } catch (err) {
        console.error('Error fetching vulnerability logs:', err);
        setError('Failed to fetch vulnerability logs. Please try again.');
        setLogs([]);
        setAllLogs([]);
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilityLogs();
  }, [page, rowsPerPage]);

  // Handler for viewing log details
  const handleViewDetails = (log) => {
    setSelectedLog(log);
  };

  // Format timestamp to be more readable
  const formatTimestamp = (timestamp) => {
    if (!timestamp) return 'N/A';
    try {
      const date = new Date(timestamp);
      return date.toLocaleString();
    } catch (e) {
      return timestamp;
    }
  };

  // Get severity color based on vulnerability severity
  const getSeverityColor = (severity) => {
    if (!severity) return 'default';
    
    const severityLower = severity.toLowerCase();
    if (severityLower === 'critical') return 'error';
    if (severityLower === 'high') return 'error';
    if (severityLower === 'medium') return 'warning';
    if (severityLower === 'low') return 'info';
    return 'default';
  };

  // Process data for visualizations
  const visualizationData = useMemo(() => {
    if (!allLogs || allLogs.length === 0) return null;
    
    // Count by severity
    const severityCounts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
      Unknown: 0
    };
    
    // Top CVEs, Agents, Packages
    const cveMap = {};
    const agentMap = {};
    const packageMap = {};
    const scoreData = [];
    const timelineData = [];
    
    allLogs.forEach(log => {
      // Process severity
      const severity = log.data?.vulnerability?.severity || 'Unknown';
      const severityKey = severity.charAt(0).toUpperCase() + severity.slice(1).toLowerCase();
      severityCounts[severityKey] = (severityCounts[severityKey] || 0) + 1;
      
      // Process CVE
      const cve = log.data?.vulnerability?.cve;
      if (cve) {
        cveMap[cve] = (cveMap[cve] || 0) + 1;
      }
      
      // Process Agent
      const agent = log.agent?.name || 'Unknown';
      agentMap[agent] = (agentMap[agent] || 0) + 1;
      
      // Process Package
      const pkg = log.data?.vulnerability?.package?.name;
      if (pkg) {
        packageMap[pkg] = (packageMap[pkg] || 0) + 1;
      }
      
      // Process score for visualization
      const baseScore = log.data?.vulnerability?.cvss?.cvss3?.base_score || 
                       log.data?.vulnerability?.cvss?.base_score ||
                       log.data?.vulnerability?.score?.base;
      
      if (baseScore && cve) {
        scoreData.push({
          cve,
          score: parseFloat(baseScore)
        });
      }
      
      // Process timestamp for timeline
      if (log.timestamp) {
        let date;
        try {
          date = new Date(log.timestamp);
          const dateString = date.toISOString().split('T')[0];
          
          // Group by date
          const existingIndex = timelineData.findIndex(item => item.date === dateString);
          if (existingIndex >= 0) {
            timelineData[existingIndex].count += 1;
          } else {
            timelineData.push({
              date: dateString,
              count: 1
            });
          }
        } catch (e) {
          // Skip invalid dates
        }
      }
    });
    
    // Sort and format for charts
    const topCVEs = Object.entries(cveMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([name, value]) => ({ name, value }));
      
    const topAgents = Object.entries(agentMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([name, value]) => ({ name, value }));
      
    const topPackages = Object.entries(packageMap)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([name, value]) => ({ name, value }));
    
    // Sort scores
    const topScores = scoreData
      .sort((a, b) => b.score - a.score)
      .slice(0, 15);
      
    // Sort timeline data
    const sortedTimelineData = timelineData
      .sort((a, b) => new Date(a.date) - new Date(b.date));
      
    return {
      severityCounts,
      topCVEs,
      topAgents,
      topPackages,
      topScores,
      timelineData: sortedTimelineData
    };
  }, [allLogs]);

  // Chart options
  const severityChartOption = {
    title: {
      text: 'Vulnerabilities by Severity',
      left: 'center'
    },
    tooltip: {
      trigger: 'item',
      formatter: '{a} <br/>{b}: {c} ({d}%)'
    },
    legend: {
      orient: 'vertical',
      left: 'left',
      data: Object.keys(visualizationData?.severityCounts || {})
    },
    series: [
      {
        name: 'Severity',
        type: 'pie',
        radius: ['50%', '70%'],
        avoidLabelOverlap: false,
        itemStyle: {
          borderRadius: 10,
          borderColor: '#fff',
          borderWidth: 2
        },
        label: {
          show: false,
          position: 'center'
        },
        emphasis: {
          label: {
            show: true,
            fontSize: '18',
            fontWeight: 'bold'
          }
        },
        labelLine: {
          show: false
        },
        data: Object.entries(visualizationData?.severityCounts || {}).map(([name, value]) => ({
          name,
          value,
          itemStyle: {
            color: name === 'Critical' ? '#dc3545' : 
                  name === 'High' ? '#ff6b6b' : 
                  name === 'Medium' ? '#ffc107' : 
                  name === 'Low' ? '#17a2b8' : '#6c757d'
          }
        }))
      }
    ]
  };

  const topCVEChartOption = {
    title: {
      text: 'Top CVEs',
      left: 'center'
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'value'
    },
    yAxis: {
      type: 'category',
      data: (visualizationData?.topCVEs || []).map(item => item.name).reverse(),
      axisLabel: {
        width: 200,
        overflow: 'truncate'
      }
    },
    series: [
      {
        name: 'Count',
        type: 'bar',
        data: (visualizationData?.topCVEs || []).map(item => item.value).reverse(),
        itemStyle: {
          color: '#36a2eb'
        }
      }
    ]
  };

  const topAgentsChartOption = {
    title: {
      text: 'Top Agents',
      left: 'center'
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'value'
    },
    yAxis: {
      type: 'category',
      data: (visualizationData?.topAgents || []).map(item => item.name).reverse(),
      axisLabel: {
        width: 150,
        overflow: 'truncate'
      }
    },
    series: [
      {
        name: 'Count',
        type: 'bar',
        data: (visualizationData?.topAgents || []).map(item => item.value).reverse(),
        itemStyle: {
          color: '#4bc0c0'
        }
      }
    ]
  };

  const topPackagesChartOption = {
    title: {
      text: 'Top Vulnerable Packages',
      left: 'center'
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'value'
    },
    yAxis: {
      type: 'category',
      data: (visualizationData?.topPackages || []).map(item => item.name).reverse(),
      axisLabel: {
        width: 150,
        overflow: 'truncate'
      }
    },
    series: [
      {
        name: 'Count',
        type: 'bar',
        data: (visualizationData?.topPackages || []).map(item => item.value).reverse(),
        itemStyle: {
          color: '#ff9f40'
        }
      }
    ]
  };

  const vulnerabilityScoreChartOption = {
    title: {
      text: 'Top Vulnerability Scores',
      left: 'center'
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'shadow'
      },
      formatter: function(params) {
        const dataIndex = params[0].dataIndex;
        const cve = (visualizationData?.topScores || [])[dataIndex]?.cve || '';
        const score = params[0].value;
        return `${cve}: ${score}`;
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      data: (visualizationData?.topScores || []).map((item, index) => index + 1),
      axisLabel: {
        interval: 0
      }
    },
    yAxis: {
      type: 'value',
      name: 'CVSS Score',
      max: 10
    },
    series: [
      {
        name: 'CVSS Score',
        type: 'bar',
        data: (visualizationData?.topScores || []).map(item => item.score),
        itemStyle: {
          color: function(params) {
            const score = params.value;
            if (score >= 9.0) return '#dc3545'; // Critical
            if (score >= 7.0) return '#ff6b6b'; // High
            if (score >= 4.0) return '#ffc107'; // Medium
            return '#17a2b8'; // Low
          }
        }
      }
    ]
  };

  const timelineChartOption = {
    title: {
      text: 'Vulnerability Timeline',
      left: 'center'
    },
    tooltip: {
      trigger: 'axis',
      axisPointer: {
        type: 'cross',
        label: {
          backgroundColor: '#6a7985'
        }
      }
    },
    grid: {
      left: '3%',
      right: '4%',
      bottom: '3%',
      containLabel: true
    },
    xAxis: {
      type: 'category',
      boundaryGap: false,
      data: (visualizationData?.timelineData || []).map(item => item.date)
    },
    yAxis: {
      type: 'value',
      name: 'Vulnerabilities'
    },
    series: [
      {
        name: 'Detected Vulnerabilities',
        type: 'line',
        stack: 'Total',
        areaStyle: {},
        emphasis: {
          focus: 'series'
        },
        data: (visualizationData?.timelineData || []).map(item => item.count),
        itemStyle: {
          color: '#8884d8'
        }
      }
    ]
  };

  return (
    <Box sx={{ p: 3 }}>
      <Typography variant="h4" gutterBottom>
        Vulnerability Detection
      </Typography>
      <Typography variant="body1" paragraph>
        This page displays detected vulnerabilities from security logs.
      </Typography>

      {error && (
        <Alert severity="error" sx={{ mb: 3 }}>
          {error}
        </Alert>
      )}

      {loading ? (
        <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>
          <CircularProgress />
        </Box>
      ) : (
        <>
          {/* Visualization Dashboard */}
          {visualizationData && (
            <Paper sx={{ mb: 4, p: 2 }}>
              <Tabs 
                value={activeTab} 
                onChange={(e, newValue) => setActiveTab(newValue)}
                variant="scrollable"
                scrollButtons="auto"
                sx={{ mb: 2 }}
              >
                <Tab label="Overview" />
                <Tab label="Top CVEs" />
                <Tab label="Top Agents & Packages" />
                <Tab label="Timeline" />
              </Tabs>
              
              {/* Overview Tab */}
              {activeTab === 0 && (
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6} lg={4}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={severityChartOption} style={{ height: '300px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                  <Grid item xs={12} md={6} lg={8}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={vulnerabilityScoreChartOption} style={{ height: '300px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              )}
              
              {/* Top CVEs Tab */}
              {activeTab === 1 && (
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={topCVEChartOption} style={{ height: '500px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              )}
              
              {/* Top Agents & Packages Tab */}
              {activeTab === 2 && (
                <Grid container spacing={3}>
                  <Grid item xs={12} md={6}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={topAgentsChartOption} style={{ height: '400px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                  <Grid item xs={12} md={6}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={topPackagesChartOption} style={{ height: '400px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              )}
              
              {/* Timeline Tab */}
              {activeTab === 3 && (
                <Grid container spacing={3}>
                  <Grid item xs={12}>
                    <Card>
                      <CardContent>
                        <ReactECharts option={timelineChartOption} style={{ height: '400px' }} />
                      </CardContent>
                    </Card>
                  </Grid>
                </Grid>
              )}
            </Paper>
          )}

          {logs.length === 0 ? (
            <Paper sx={{ p: 3, textAlign: 'center' }}>
              <Typography variant="h6">No vulnerability logs found</Typography>
              <Typography variant="body2" color="textSecondary">
                There are currently no vulnerability logs to display.
              </Typography>
            </Paper>
          ) : (
            <>
              <TableContainer component={Paper} sx={{ mb: 3 }}>
                <Table sx={{ minWidth: 650 }} aria-label="vulnerability logs table">
                  <TableHead>
                    <TableRow>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Timestamp</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Agent Name</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>CVE</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Package</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Severity</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Title</TableCell>
                      <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {logs.map((log) => (
                      <TableRow key={log._id || log.id || Math.random().toString()} hover>
                        <TableCell>{formatTimestamp(log.timestamp)}</TableCell>
                        <TableCell>{log.agent?.name || 'Unknown'}</TableCell>
                        <TableCell>{log.data?.vulnerability?.cve || 'N/A'}</TableCell>
                        <TableCell>
                          {log.data?.vulnerability?.package?.name 
                            ? `${log.data.vulnerability.package.name} (${log.data.vulnerability.package.version || 'Unknown'})`
                            : 'N/A'
                          }
                        </TableCell>
                        <TableCell>
                          <Chip 
                            label={log.data?.vulnerability?.severity || 'Unknown'} 
                            color={getSeverityColor(log.data?.vulnerability?.severity)}
                            size="small"
                          />
                        </TableCell>
                        <TableCell>{log.data?.vulnerability?.title || log.rule?.description || 'N/A'}</TableCell>
                        <TableCell>
                          <Link
                            component="button"
                            variant="body2"
                            onClick={() => handleViewDetails(log)}
                            sx={{ textDecoration: 'none', '&:hover': { textDecoration: 'underline' } }}
                          >
                            View Details
                          </Link>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </TableContainer>

              {/* Pagination Controls */}
              <Grid container spacing={2} alignItems="center" sx={{ mt: 2 }}>
                <Grid item xs={12} sm={6} md={4}>
                  <FormControl variant="outlined" size="small" fullWidth>
                    <InputLabel id="rows-per-page-label">Rows per page</InputLabel>
                    <Select
                      labelId="rows-per-page-label"
                      value={rowsPerPage}
                      onChange={(e) => {
                        setRowsPerPage(parseInt(e.target.value, 10));
                        setPage(1); // Reset to first page when changing rows per page
                      }}
                      label="Rows per page"
                    >
                      <MenuItem value={10}>10</MenuItem>
                      <MenuItem value={25}>25</MenuItem>
                      <MenuItem value={50}>50</MenuItem>
                      <MenuItem value={100}>100</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6} md={8} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                  <Pagination 
                    count={totalPages} 
                    page={page} 
                    onChange={(e, newPage) => setPage(newPage)} 
                    color="primary"
                    showFirstButton
                    showLastButton
                  />
                </Grid>
              </Grid>

              {/* Log Details Dialog */}
              <Dialog
                open={Boolean(selectedLog)}
                onClose={() => setSelectedLog(null)}
                maxWidth="md"
                fullWidth
              >
                <DialogTitle sx={{
                  backgroundColor: '#f5f5f5',
                  display: 'flex',
                  justifyContent: 'space-between',
                  alignItems: 'center'
                }}>
                  <Typography variant="h6">Vulnerability Details</Typography>
                  <IconButton
                    aria-label="close"
                    onClick={() => setSelectedLog(null)}
                    size="small"
                  >
                    <CloseIcon />
                  </IconButton>
                </DialogTitle>
                <DialogContent>
                  {selectedLog && (
                    <Box sx={{ mt: 2 }}>
                      {/* Vulnerability-specific details */}
                      {selectedLog.data?.vulnerability && (
                        <Box sx={{ mb: 3 }}>
                          <Typography variant="h6" gutterBottom>
                            Vulnerability Information
                          </Typography>
                          
                          <Grid container spacing={2}>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="subtitle2">CVE:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.cve || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="subtitle2">Severity:</Typography>
                              <Chip 
                                label={selectedLog.data.vulnerability.severity || 'Unknown'} 
                                color={getSeverityColor(selectedLog.data.vulnerability.severity)}
                                size="small"
                                sx={{ mb: 1 }}
                              />
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="subtitle2">Package:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.package?.name || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12} sm={6}>
                              <Typography variant="subtitle2">Version:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.package?.version || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">Title:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.title || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">Description/Rationale:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.rationale || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">Condition:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.package?.condition || 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">Published:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.published 
                                  ? new Date(selectedLog.data.vulnerability.published).toLocaleString() 
                                  : 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">Updated:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.updated 
                                  ? new Date(selectedLog.data.vulnerability.updated).toLocaleString() 
                                  : 'N/A'}
                              </Typography>
                            </Grid>
                            <Grid item xs={12}>
                              <Typography variant="subtitle2">References:</Typography>
                              <Typography variant="body2" sx={{ mb: 1 }}>
                                {selectedLog.data.vulnerability.reference ? 
                                  selectedLog.data.vulnerability.reference.split(',').map((ref, index) => (
                                    <div key={index}>
                                      <Link href={ref.trim()} target="_blank" rel="noopener">
                                        {ref.trim()}
                                      </Link>
                                    </div>
                                  )) : 'N/A'
                                }
                              </Typography>
                            </Grid>
                            {selectedLog.data.vulnerability.cvss && (
                              <Grid item xs={12}>
                                <Typography variant="subtitle2">CVSS Score:</Typography>
                                <Typography variant="body2" sx={{ mb: 1 }}>
                                  Base Score: {selectedLog.data.vulnerability.cvss.cvss3?.base_score || 
                                               selectedLog.data.vulnerability.cvss?.base_score ||
                                               selectedLog.data.vulnerability.score?.base || 'N/A'}
                                </Typography>
                                {selectedLog.data.vulnerability.cvss.cvss3?.vector && (
                                  <Typography variant="body2" component="div" sx={{ ml: 2 }}>
                                    <strong>Vector:</strong>
                                    <ul style={{ marginTop: 4 }}>
                                      {Object.entries(selectedLog.data.vulnerability.cvss.cvss3.vector).map(([key, value]) => (
                                        <li key={key}>{key.replace(/_/g, ' ')}: {value}</li>
                                      ))}
                                    </ul>
                                  </Typography>
                                )}
                              </Grid>
                            )}
                          </Grid>
                        </Box>
                      )}

                      {/* Display full log for debugging */}
                      <Typography variant="h6" gutterBottom>
                        Full Log Data
                      </Typography>
                      <Paper 
                        elevation={1} 
                        sx={{ 
                          p: 2, 
                          maxHeight: '300px', 
                          overflow: 'auto', 
                          backgroundColor: '#f8f8f8',
                          fontFamily: 'monospace'
                        }}
                      >
                        <pre>{JSON.stringify(selectedLog, null, 2)}</pre>
                      </Paper>
                    </Box>
                  )}
                </DialogContent>
              </Dialog>
            </>
          )}
        </>
      )}
    </Box>
  );
};

export default VulnerabilityDetection;