import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
    Box,
    Typography,
    Table,
    TableBody,
    TableCell,
    TableContainer,
    TableHead,
    TableRow,
    Paper,
    Alert,
    CircularProgress,
    Link,
    Dialog,
    DialogTitle,
    DialogContent,
    IconButton,
    Chip,
    Pagination,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Grid,
    Card,
    CardContent
} from '@mui/material';
import { 
    ShieldOutlined as VulnerabilityIcon 
} from '@mui/icons-material';
import CloseIcon from '@mui/icons-material/Close';
import axios from 'axios';
import * as echarts from 'echarts/core';
import { 
    TitleComponent, 
    TooltipComponent, 
    GridComponent, 
    DatasetComponent, 
    TransformComponent,
    LegendComponent
} from 'echarts/components';
import { 
    PieChart,
    BarChart
} from 'echarts/charts';
import { 
    LabelLayout, 
    UniversalTransition 
} from 'echarts/features';
import { CanvasRenderer } from 'echarts/renderers';
import { StructuredLogView } from '../utils/normalizeLogs';
import { API_URL } from '../config';

// Register necessary ECharts components
echarts.use([
    TitleComponent,
    TooltipComponent,
    GridComponent,
    DatasetComponent,
    TransformComponent,
    PieChart,
    BarChart,
    LabelLayout,
    UniversalTransition,
    CanvasRenderer,
    LegendComponent
]);

const VulnerabilityDetection = () => {
    // State variables
    const [logs, setLogs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [chartLoading, setChartLoading] = useState(true);
    const [error, setError] = useState(null);
    const [selectedLog, setSelectedLog] = useState(null);
    const [timeRange, setTimeRange] = useState('7days');
    const [page, setPage] = useState(1);
    const [rowsPerPage, setRowsPerPage] = useState(10);
    const [totalPages, setTotalPages] = useState(0);
    const [totalLogs, setTotalLogs] = useState(0);
    const [severityChartData, setSeverityChartData] = useState([]);

    // Chart reference
    const severityChartRef = useRef(null);

    // Function to get time range start date
    const getTimeRangeDate = useCallback(() => {
        const now = new Date();
        let startDate;
        
        switch(timeRange) {
            case '1hr':
                startDate = new Date(now.getTime() - 60 * 60 * 1000);
                break;
            case '6hr':
                startDate = new Date(now.getTime() - 6 * 60 * 60 * 1000);
                break;
            case '24hr':
                startDate = new Date(now.getTime() - 24 * 60 * 60 * 1000);
                break;
            case '7days':
            default:
                startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
                break;
        }
        
        return startDate.toISOString();
    }, [timeRange]);

    // Render severity distribution chart
    const renderSeverityChart = useCallback(() => {
        if (severityChartRef.current && severityChartData.length > 0) {
            const chart = echarts.init(severityChartRef.current);
            chart.setOption({
                title: { 
                    text: 'Vulnerability Severity Distribution', 
                    left: 'center' 
                },
                tooltip: { 
                    trigger: 'item',
                    formatter: '{a} <br/>{b}: {c} ({d}%)' 
                },
                legend: {
                    orient: 'horizontal',
                    bottom: 10,
                    data: severityChartData.map(item => item.name)
                },
                series: [{
                    name: 'Severity',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    itemStyle: { 
                        borderRadius: 10,
                        borderColor: '#fff',
                        borderWidth: 2
                    },
                    label: {
                        show: false,
                        position: 'center'
                    },
                    emphasis: {
                        label: {
                            show: true,
                            fontSize: 16,
                            fontWeight: 'bold'
                        }
                    },
                    labelLine: {
                        show: false
                    },
                    data: severityChartData,
                    // Custom colors based on severity
                    color: ['#D32F2F', '#F57C00', '#FFC107', '#4CAF50', '#9E9E9E']
                }]
            });

            // Handle resize
            const handleResize = () => chart.resize();
            window.addEventListener('resize', handleResize);
            return () => {
                window.removeEventListener('resize', handleResize);
                chart.dispose();
            };
        }
    }, [severityChartData]);

    // Fetch vulnerability logs
    const fetchVulnerabilityLogs = useCallback(async () => {
        try {
            setLoading(true);
            setError(null);

            const token = localStorage.getItem('token');
            if (!token) {
                throw new Error('Authentication token not found');
            }

            const startTime = getTimeRangeDate();
            
            const response = await axios.get(`${API_URL}/api/logs/vulnerability`, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                },
                params: {
                    page,
                    limit: rowsPerPage,
                    startTime
                }
            });
            
            console.log('Fetched logs:', response.data.logs); // Add this line to debug
            setLogs(response.data.logs);
            setTotalPages(response.data.totalPages || 1);
            setTotalLogs(response.data.totalLogs || 0);
            
            // Process data for visualization
            processSeverityData(response.data.logs);

        } catch (error) {
            console.error('Error fetching vulnerability logs:', error);
            setError(error.response?.data?.message || error.message || 'Failed to fetch vulnerability logs');
            setLogs([]);
        } finally {
            setLoading(false);
            setChartLoading(false);
        }
    }, [page, rowsPerPage, getTimeRangeDate]);

    // Process logs data for severity chart
    const processSeverityData = useCallback((logsData) => {
        const severityCounts = {
            'Critical': 0,
            'High': 0,
            'Medium': 0,
            'Low': 0,
            'Unknown': 0
        };

        logsData.forEach(log => {
            if (log.data && log.data.vulnerability && log.data.vulnerability.severity) {
                const severity = log.data.vulnerability.severity;
                if (severityCounts.hasOwnProperty(severity)) {
                    severityCounts[severity]++;
                } else {
                    severityCounts['Unknown']++;
                }
            } else {
                severityCounts['Unknown']++;
            }
        });

        const chartData = Object.entries(severityCounts)
            .map(([name, value]) => ({ name, value }))
            .filter(item => item.value > 0);
        
        setSeverityChartData(chartData);
    }, []);

    // Effect for initial fetch and time range changes
    useEffect(() => {
        fetchVulnerabilityLogs();
    }, [fetchVulnerabilityLogs, timeRange, page, rowsPerPage]);

    // Effect for chart rendering
    useEffect(() => {
        const cleanup = renderSeverityChart();
        return cleanup;
    }, [renderSeverityChart, severityChartData]);

    // Utility functions
    const formatTimestamp = (timestamp) => {
        try {
            return new Date(timestamp).toLocaleString();
        } catch (error) {
            return 'Invalid Date';
        }
    };

    const getSeverityColor = (severity) => {
        switch (severity) {
            case 'Critical': return 'error';
            case 'High': return 'error';
            case 'Medium': return 'warning';
            case 'Low': return 'success';
            default: return 'default';
        }
    };

    const handleViewDetails = (log) => {
        console.log('Selected log:', log); // Add this line to debug
        setSelectedLog(log);
    };

    return (
        <Box p={4}>
            <Typography variant="h4" gutterBottom sx={{ color: '#d32f2f', mb: 3 }}>
                Vulnerability Detection
                <Typography variant="subtitle1" sx={{ color: 'text.secondary', mt: 1 }}>
                    Monitoring and analysis of security vulnerabilities
                </Typography>
            </Typography>

            {/* Time Range Selector */}
            <Grid container spacing={2} sx={{ mb: 3 }}>
                <Grid item xs={12} md={4}>
                    <FormControl fullWidth variant="outlined">
                        <InputLabel>Time Range</InputLabel>
                        <Select
                            value={timeRange}
                            onChange={(e) => {
                                setTimeRange(e.target.value);
                                setPage(1);
                            }}
                            label="Time Range"
                        >
                            <MenuItem value="1hr">Last 1 Hour</MenuItem>
                            <MenuItem value="6hr">Last 6 Hours</MenuItem>
                            <MenuItem value="24hr">Last 24 Hours</MenuItem>
                            <MenuItem value="7days">Last 7 Days</MenuItem>
                        </Select>
                    </FormControl>
                </Grid>
            </Grid>

            {error && (
                <Alert severity="error" sx={{ mb: 3 }}>
                    {error}
                </Alert>
            )}

            <Alert
                icon={<VulnerabilityIcon />}
                severity="warning"
                sx={{ mb: 3 }}
            >
                {totalLogs} vulnerability logs found in the selected time range
            </Alert>

            {/* Severity Distribution Chart */}
            {chartLoading ? (
                <Box display="flex" justifyContent="center" alignItems="center" minHeight="300px">
                    <CircularProgress color="secondary" />
                    <Typography variant="subtitle1" sx={{ ml: 2 }}>
                        Loading visualization data...
                    </Typography>
                </Box>
            ) : (
                <Card sx={{ mb: 4 }}>
                    <CardContent>
                        <Box ref={severityChartRef} sx={{ height: 400 }} />
                    </CardContent>
                </Card>
            )}

            <Typography variant="h5" gutterBottom sx={{ color: '#555', mb: 2 }}>
                Vulnerability Logs
            </Typography>
            
            {loading ? (
                <Box display="flex" justifyContent="center" alignItems="center" minHeight="50vh">
                    <CircularProgress color="error" />
                </Box>
            ) : (
                <>
                    <TableContainer component={Paper} sx={{ maxHeight: 'calc(100vh - 400px)' }}>
                        <Table stickyHeader>
                            <TableHead>
                                <TableRow>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Timestamp</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Agent Name</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>CVE</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Package</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Severity</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Title</TableCell>
                                    <TableCell style={{ fontWeight: 'bold', backgroundColor: '#f5f5f5' }}>Actions</TableCell>
                                </TableRow>
                            </TableHead>
                            <TableBody>
                                {logs.map((log) => (
                                    <TableRow key={log._id || log.id} hover>
                                        <TableCell>{formatTimestamp(log.timestamp)}</TableCell>
                                        <TableCell>{log.agent?.name || 'Unknown'}</TableCell>
                                        <TableCell>{log.data?.vulnerability?.cve || 'N/A'}</TableCell>
                                        <TableCell>
                                            {log.data?.vulnerability?.package?.name 
                                                ? `${log.data.vulnerability.package.name} (${log.data.vulnerability.package.version || 'Unknown'})`
                                                : 'N/A'
                                            }
                                        </TableCell>
                                        <TableCell>
                                            <Chip 
                                                label={log.data?.vulnerability?.severity || 'Unknown'} 
                                                color={getSeverityColor(log.data?.vulnerability?.severity)}
                                                size="small"
                                            />
                                        </TableCell>
                                        <TableCell>{log.data?.vulnerability?.title || log.rule?.description || 'N/A'}</TableCell>
                                        <TableCell>
                                            <Link
                                                component="button"
                                                variant="body2"
                                                onClick={() => handleViewDetails(log)}
                                                sx={{ textDecoration: 'none', '&:hover': { textDecoration: 'underline' } }}
                                            >
                                                View Details
                                            </Link>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </TableContainer>

                    {/* Pagination Controls */}
                    <Grid container spacing={2} alignItems="center" sx={{ mt: 2 }}>
                        <Grid item xs={12} sm={6} md={4}>
                            <FormControl variant="outlined" size="small" fullWidth>
                                <InputLabel id="rows-per-page-label">Rows per page</InputLabel>
                                <Select
                                    labelId="rows-per-page-label"
                                    value={rowsPerPage}
                                    onChange={(e) => setRowsPerPage(parseInt(e.target.value, 10))}
                                    label="Rows per page"
                                >
                                    <MenuItem value={10}>10</MenuItem>
                                    <MenuItem value={25}>25</MenuItem>
                                    <MenuItem value={50}>50</MenuItem>
                                    <MenuItem value={100}>100</MenuItem>
                                </Select>
                            </FormControl>
                        </Grid>
                        <Grid item xs={12} sm={6} md={8} sx={{ display: 'flex', justifyContent: 'flex-end' }}>
                            <Pagination 
                                count={totalPages} 
                                page={page} 
                                onChange={(e, newPage) => setPage(newPage)} 
                                color="primary"
                                showFirstButton
                                showLastButton
                            />
                        </Grid>
                    </Grid>

                    {/* Log Details Dialog */}
                    <Dialog
                        open={Boolean(selectedLog)}
                        onClose={() => setSelectedLog(null)}
                        maxWidth="md"
                        fullWidth
                    >
                        <DialogTitle sx={{
                            backgroundColor: '#f5f5f5',
                            display: 'flex',
                            justifyContent: 'space-between',
                            alignItems: 'center'
                        }}>
                            <Typography variant="h6">Vulnerability Details</Typography>
                            <IconButton
                                aria-label="close"
                                onClick={() => setSelectedLog(null)}
                                size="small"
                            >
                                <CloseIcon />
                            </IconButton>
                        </DialogTitle>
                        <DialogContent>
                            {selectedLog && (
                                <Box sx={{ mt: 2 }}>
                                    {/* Vulnerability-specific details */}
                                    {selectedLog.data?.vulnerability && (
                                        <Box sx={{ mb: 3 }}>
                                            <Typography variant="h6" gutterBottom>
                                                Vulnerability Information
                                            </Typography>
                                            
                                            <Grid container spacing={2}>
                                                <Grid item xs={12} sm={6}>
                                                    <Typography variant="subtitle2">CVE:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.cve || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12} sm={6}>
                                                    <Typography variant="subtitle2">Severity:</Typography>
                                                    <Chip 
                                                        label={selectedLog.data.vulnerability.severity || 'Unknown'} 
                                                        color={getSeverityColor(selectedLog.data.vulnerability.severity)}
                                                        size="small"
                                                        sx={{ mb: 1 }}
                                                    />
                                                </Grid>
                                                <Grid item xs={12} sm={6}>
                                                    <Typography variant="subtitle2">Package:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.package?.name || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12} sm={6}>
                                                    <Typography variant="subtitle2">Version:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.package?.version || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">Title:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.title || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">Description/Rationale:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.rationale || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">Condition:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.package?.condition || 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">Published:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.published ? new Date(selectedLog.data.vulnerability.published).toLocaleString() : 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">Updated:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.updated ? new Date(selectedLog.data.vulnerability.updated).toLocaleString() : 'N/A'}
                                                    </Typography>
                                                </Grid>
                                                <Grid item xs={12}>
                                                    <Typography variant="subtitle2">References:</Typography>
                                                    <Typography variant="body2" sx={{ mb: 1 }}>
                                                        {selectedLog.data.vulnerability.reference ? 
                                                            selectedLog.data.vulnerability.reference.split(',').map((ref, index) => (
                                                                <div key={index}>
                                                                    <Link href={ref.trim()} target="_blank" rel="noopener">
                                                                        {ref.trim()}
                                                                    </Link>
                                                                </div>
                                                            )) : 'N/A'
                                                        }
                                                    </Typography>
                                                </Grid>
                                                {selectedLog.data.vulnerability.cvss && (
                                                    <Grid item xs={12}>
                                                        <Typography variant="subtitle2">CVSS Score:</Typography>
                                                        <Typography variant="body2" sx={{ mb: 1 }}>
                                                            Base Score: {selectedLog.data.vulnerability.cvss.cvss3?.base_score || selectedLog.data.vulnerability.score?.base || 'N/A'}
                                                        </Typography>
                                                        {selectedLog.data.vulnerability.cvss.cvss3?.vector && (
                                                            <Typography variant="body2" component="div" sx={{ ml: 2 }}>
                                                                <strong>Vector:</strong>
                                                                <ul style={{ marginTop: 4 }}>
                                                                    {Object.entries(selectedLog.data.vulnerability.cvss.cvss3.vector).map(([key, value]) => (
                                                                        <li key={key}>{key.replace(/_/g, ' ')}: {value}</li>
                                                                    ))}
                                                                </ul>
                                                            </Typography>
                                                        )}
                                                    </Grid>
                                                )}
                                            </Grid>
                                        </Box>
                                    )}

                                    {/* Display full log for debugging */}
                                    <Typography variant="h6" gutterBottom>
                                        Full Log Data
                                    </Typography>
                                    <Paper 
                                        elevation={1} 
                                        sx={{ 
                                            p: 2, 
                                            maxHeight: '300px', 
                                            overflow: 'auto', 
                                            backgroundColor: '#f8f8f8',
                                            fontFamily: 'monospace'
                                        }}
                                    >
                                        <pre>{JSON.stringify(selectedLog, null, 2)}</pre>
                                    </Paper>
                                </Box>
                            )}
                        </DialogContent>
                    </Dialog>
                </>
            )}
        </Box>
    );
};

export default VulnerabilityDetection;