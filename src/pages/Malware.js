import React, { useState, useEffect, useCallback } from 'react';
import {
    Box, Paper, Typography, CircularProgress, FormControl, FormGroup, FormControlLabel, Checkbox, Button, Table, TableBody, TableCell,
    TableContainer, TableHead, TableRow, TablePagination, Chip, Grid, useTheme, useMediaQuery, Card, CardContent, IconButton, Divider
} from '@mui/material';
import axios from 'axios';
import { API_URL } from '../config';
import CloseIcon from '@mui/icons-material/Close';
import RefreshIcon from '@mui/icons-material/Refresh';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { Dialog, DialogTitle, DialogContent } from '@mui/material';
import { StructuredLogView, parseLogMessage } from '../utils/normalizeLogs';
import {
    PieChart,
    Pie,
    Cell,
    BarChart,
    Bar,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    Legend,
    ResponsiveContainer
} from 'recharts';

// Sub-components
// For FiltersComponent with animated border
const FiltersComponent = ({ filters, handleFilterChange, handleRefresh }) => {
    return (
        <Card
            variant="outlined"
            sx={{
                mb: 3,
                p: 2,
                position: 'relative',
                background: 'linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%)',
                borderRadius: '10px',
                '&::before': {
                    content: '""',
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    borderRadius: '10px',
                    padding: '2px',
                    background: 'linear-gradient(45deg, #3498db, #2ecc71, #f39c12, #e74c3c, #9b59b6, #3498db)',
                    WebkitMask: 'linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0)',
                    WebkitMaskComposite: 'xor',
                    maskComposite: 'exclude',
                    animation: 'animatedgradient 6s ease alternate infinite',
                    backgroundSize: '300% 300%',
                    pointerEvents: 'none',
                    zIndex: 1
                },
                '@keyframes animatedgradient': {
                    '0%': {
                        backgroundPosition: '0% 50%'
                    },
                    '50%': {
                        backgroundPosition: '100% 50%'
                    },
                    '100%': {
                        backgroundPosition: '0% 50%'
                    }
                }
            }}
        >
            <Typography variant="h6" component="h3" gutterBottom sx={{ fontWeight: 'bold', color: '#2c3e50' }}>
                Filters
            </Typography>
            <FormControl component="fieldset" sx={{ width: '100%' }}>
                <FormGroup row>
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.virustotal}
                                onChange={handleFilterChange}
                                name="virustotal"
                                color="primary"
                            />
                        }
                        label="CyberSentinel"
                    />
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.Sentinel_AI}
                                onChange={handleFilterChange}
                                name="Sentinel AI"
                                color="primary"
                            />
                        }
                        label="Sentinel AI"
                    />
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.rootcheck}
                                onChange={handleFilterChange}
                                name="rootcheck"
                                color="primary"
                            />
                        }
                        label="Rootcheck"
                    />
                    <Button
                        variant="contained"
                        onClick={handleRefresh}
                        sx={{ ml: 2 }}
                        startIcon={<RefreshIcon />}
                    >
                        Refresh
                    </Button>
                </FormGroup>
            </FormControl>
        </Card>
    );
};

const TopLocationsComponent = ({ locationStats }) => {
    const theme = useTheme();

    // Enhanced color palette
    const COLORS = ['#3498db', '#2ecc71', '#f39c12', '#e74c3c', '#9b59b6'];

    const pieData = locationStats.map(item => ({
        name: item.location,
        value: item.count
    }));

    return (
        <Card
            variant="outlined"
            sx={{
                mb: 3,
                p: 2,
                transition: 'transform 0.3s, box-shadow 0.3s',
                '&:hover': {
                    transform: 'translateY(-5px)',
                    boxShadow: '0 8px 16px rgba(0,0,0,0.1)'
                },
                background: 'linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%)',
                borderRadius: '10px'
            }}
        >
            <Typography
                variant="h6"
                component="h3"
                gutterBottom
                sx={{
                    borderBottom: '2px solid #3498db',
                    paddingBottom: 1,
                    color: '#2c3e50',
                    fontWeight: 'bold'
                }}
            >
                Top Malware Locations
            </Typography>

            {/* Centered pie chart */}
            <Box sx={{ display: 'flex', justifyContent: 'center', mb: 2 }}>
                {locationStats.length > 0 && (
                    <Box sx={{ width: '100%', maxWidth: '300px', height: '250px' }}>
                        <ResponsiveContainer width="100%" height="100%">
                            <PieChart>
                                <Pie
                                    data={pieData}
                                    cx="50%"
                                    cy="50%"
                                    labelLine={false}
                                    outerRadius={80}
                                    fill="#8884d8"
                                    dataKey="value"
                                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                                    animationBegin={0}
                                    animationDuration={1500}
                                    animationEasing="ease-out"
                                >
                                    {pieData.map((entry, index) => (
                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip
                                    formatter={(value) => [`Count: ${value}`, 'Occurrences']}
                                    contentStyle={{
                                        backgroundColor: 'rgba(255, 255, 255, 0.9)',
                                        borderRadius: '8px',
                                        boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                                    }}
                                />
                            </PieChart>
                        </ResponsiveContainer>
                    </Box>
                )}
            </Box>

            {/* Location chips below the chart */}
            <Box sx={{
                display: 'flex',
                flexWrap: 'wrap',
                justifyContent: 'center',
                gap: 1,
                mt: 2
            }}>
                {locationStats.map((stat, index) => (
                    <Chip
                        key={index}
                        label={`${stat.location}: ${stat.count}`}
                        variant="outlined"
                        sx={{
                            bgcolor: COLORS[index % COLORS.length],
                            color: '#fff',
                            fontWeight: 'medium',
                            '&:hover': {
                                bgcolor: COLORS[index % COLORS.length],
                                filter: 'brightness(1.1)'
                            }
                        }}
                    />
                ))}
            </Box>
        </Card>
    );
};


const ThreatLevelComponent = ({ logs }) => {
    // Calculate threat levels from logs
    const threatLevels = logs.reduce((acc, log) => {
        const level = log.rule?.level || 0;
        let severity = "Low";
        if (level >= 10) severity = "Critical";
        else if (level >= 7) severity = "High";
        else if (level >= 4) severity = "Medium";

        acc[severity] = (acc[severity] || 0) + 1;
        return acc;
    }, {});

    const threatData = Object.keys(threatLevels).map(key => ({
        name: key,
        count: threatLevels[key]
    }));

    // Enhanced color palette for threats
    const COLORS = {
        Low: '#2ecc71',
        Medium: '#f39c12',
        High: '#e74c3c',
        Critical: '#8e44ad'
    };

    return (
        <Card
            variant="outlined"
            sx={{
                mb: 3,
                p: 2,
                transition: 'transform 0.3s, box-shadow 0.3s',
                '&:hover': {
                    transform: 'translateY(-5px)',
                    boxShadow: '0 8px 16px rgba(0,0,0,0.1)'
                },
                background: 'linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%)',
                borderRadius: '10px'
            }}
        >
            <Typography
                variant="h6"
                component="h3"
                gutterBottom
                sx={{
                    borderBottom: '2px solid #e74c3c',
                    paddingBottom: 1,
                    color: '#2c3e50',
                    fontWeight: 'bold'
                }}
            >
                Threat Level Distribution
            </Typography>
            <ResponsiveContainer width="100%" height={250}>
                <BarChart
                    data={threatData}
                    animationBegin={0}
                    animationDuration={1500}
                    animationEasing="ease-out"
                >
                    <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
                    <XAxis
                        dataKey="name"
                        tick={{ fill: '#2c3e50' }}
                        axisLine={{ stroke: '#7f8c8d' }}
                    />
                    <YAxis
                        tick={{ fill: '#2c3e50' }}
                        axisLine={{ stroke: '#7f8c8d' }}
                    />
                    <Tooltip
                        contentStyle={{
                            backgroundColor: 'rgba(255, 255, 255, 0.9)',
                            borderRadius: '8px',
                            boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                        }}
                    />
                    <Legend
                        wrapperStyle={{
                            paddingTop: '10px'
                        }}
                    />
                    <Bar
                        dataKey="count"
                        name="Number of Threats"
                        radius={[4, 4, 0, 0]} // Rounded corners
                    >
                        {threatData.map((entry, index) => (
                            <Cell
                                key={`cell-${index}`}
                                fill={COLORS[entry.name] || '#8884d8'}
                                stroke="rgba(0,0,0,0.1)"
                                strokeWidth={1}
                            />
                        ))}
                    </Bar>
                </BarChart>
            </ResponsiveContainer>
        </Card>
    );
};

const MalwareLogsTable = ({
    logs,
    loading,
    formatTimestamp,
    extractGroups,
    handleViewLog,
    page,
    setPage,
    pageSize,
    setPageSize,
    totalRows
}) => {
    // Add new function to handle CSV export
    const handleExportCSV = () => {
        if (logs.length === 0) return;

        // Create CSV headers
        const headers = ['Timestamp', 'Agent', 'Level', 'Description', 'Location', 'Security Groups'];

        // Helper function to escape CSV fields properly
        const escapeCSV = (field) => {
            // If the field contains comma, quote, or newline, wrap it in quotes
            if (field && (field.includes(',') || field.includes('"') || field.includes('\n'))) {
                // Double up any quotes and wrap in quotes
                return `"${field.replace(/"/g, '""')}"`;
            }
            return field;
        };

        // Create CSV rows from logs data with proper escaping
        const csvData = logs.map(log => [
            escapeCSV(formatTimestamp(log.timestamp)),
            escapeCSV(log.agent?.name || 'Unknown'),
            escapeCSV(String(log.rule?.level || '0')),
            escapeCSV(log.rule?.description || 'No description'),
            escapeCSV(log.location || 'Unknown'),
            escapeCSV(extractGroups(log.rawLog).join(', '))
        ]);

        // Add headers to the beginning
        csvData.unshift(headers.map(header => escapeCSV(header)));

        // Convert to CSV format
        const csvContent = csvData.map(row => row.join(',')).join('\n');

        // Create Blob and download link
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `malware_logs_${new Date().toISOString().slice(0, 10)}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    };

    return (
        <Card variant="outlined" sx={{ mb: 3 }}>
            <CardContent>
                <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                    <Typography variant="h6" component="h3">
                        Malware Detection Logs
                    </Typography>
                    <IconButton
                        color="primary"
                        onClick={handleExportCSV}
                        title="Export to CSV"
                        disabled={logs.length === 0 || loading}
                    >
                        <Box component="span" sx={{ display: 'flex', alignItems: 'center' }}>
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24">
                                <path fill="currentColor" d="M5 20h14v-2H5v2zM19 9h-4V3H9v6H5l7 7l7-7z" />
                            </svg>
                        </Box>
                    </IconButton>
                </Box>
                <Box style={{ width: '100%', overflow: 'auto' }}>
                    {loading ? (
                        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4, mb: 4 }}>
                            <CircularProgress />
                        </Box>
                    ) : (
                        <TableContainer sx={{ maxHeight: 400 }}>
                            <Table size="small" stickyHeader>
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Timestamp</TableCell>
                                        <TableCell>Agent</TableCell>
                                        <TableCell>Level</TableCell>
                                        <TableCell>Description</TableCell>
                                        <TableCell>Location</TableCell>
                                        <TableCell>Security Groups</TableCell>
                                        <TableCell>Action</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {logs.map((log) => (
                                        <TableRow key={log.id}>
                                            <TableCell>{formatTimestamp(log.timestamp)}</TableCell>
                                            <TableCell>{log.agent?.name || 'Unknown'}</TableCell>
                                            <TableCell>
                                                <Chip
                                                    label={log.rule?.level || '0'}
                                                    size="small"
                                                    color={
                                                        log.rule?.level >= 10 ? "error" :
                                                            log.rule?.level >= 7 ? "warning" :
                                                                "default"
                                                    }
                                                />
                                            </TableCell>
                                            <TableCell sx={{ maxWidth: 250, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                                                {log.rule?.description || 'No description'}
                                            </TableCell>
                                            <TableCell>{log.location || 'Unknown'}</TableCell>
                                            <TableCell>{extractGroups(log.rawLog).join(', ')}</TableCell>
                                            <TableCell>
                                                <IconButton
                                                    size="small"
                                                    color="primary"
                                                    onClick={() => handleViewLog(log)}
                                                >
                                                    <VisibilityIcon fontSize="small" />
                                                </IconButton>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                            <TablePagination
                                component="div"
                                count={totalRows}
                                page={page}
                                onPageChange={(event, newPage) => setPage(newPage)}
                                rowsPerPage={pageSize}
                                onRowsPerPageChange={(event) => setPageSize(parseInt(event.target.value, 10))}
                                rowsPerPageOptions={[10, 25, 50, 100]}
                            />
                        </TableContainer>
                    )}
                </Box>
            </CardContent>
        </Card>
    );
};

// Main Component
const Malware = () => {
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('md'));

    const [logs, setLogs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        Virustotal: true,
        windows: true,
        rootcheck: true
    });
    const [page, setPage] = useState(0);
    const [pageSize, setPageSize] = useState(10);
    const [totalRows, setTotalRows] = useState(0);
    const [selectedLog, setSelectedLog] = useState(null);
    const [openDialog, setOpenDialog] = useState(false);
    const [parsedLog, setParsedLog] = useState(null);
    const [locationStats, setLocationStats] = useState([]);
    const [securityGroups, setSecurityGroups] = useState([]);
    const [visualizationLogs, setVisualizationLogs] = useState([]);

    // Format timestamp to Indian format (Asia/Kolkata)
    const formatTimestamp = (timestamp) => {
        if (!timestamp) return 'N/A';

        // Create date with time zone conversion
        const date = new Date(timestamp);

        // Format for Indian timezone (IST, UTC+5:30)
        const options = {
            timeZone: 'Asia/Kolkata',
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        };

        return new Intl.DateTimeFormat('en-IN', options).format(date);
    };

    const fetchMalwareLogs = useCallback(async () => {
        setLoading(true);
        try {
            const activeFilters = Object.keys(filters).filter(key => filters[key]);

            const response = await axios.get(`${API_URL}/api/logs/malware`, {
                params: {
                    page,
                    pageSize,
                    filters: activeFilters.join(',')
                }
            });

            const logsWithLocation = response.data.logs.map(log => ({
                ...log,
                id: log._id,
                // Extract location - prefer top level, then from rawLog.message
                location: log.location ||
                    (log.rawLog?.message && typeof log.rawLog.message === 'string' ?
                        JSON.parse(log.rawLog.message)?.location : null) ||
                    log.rawLog?.location ||
                    'Unknown'
            }));

            setLogs(logsWithLocation);
            setTotalRows(response.data.total);

            // Calculate location statistics
            const locationCounts = logsWithLocation.reduce((acc, log) => {
                const loc = log.location || 'Unknown';
                acc[loc] = (acc[loc] || 0) + 1;
                return acc;
            }, {});

            const sortedLocations = Object.entries(locationCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5) // Top 5 locations
                .map(([location, count]) => ({ location, count }));

            setLocationStats(sortedLocations);

            // Extract and calculate security groups
            const groups = new Set();
            logsWithLocation.forEach(log => {
                const logGroups = extractGroups(log.rawLog);
                logGroups.forEach(group => groups.add(group));
            });

            const groupStats = Array.from(groups).map(group => {
                const count = logsWithLocation.filter(log =>
                    extractGroups(log.rawLog).includes(group)
                ).length;
                return { name: group, count };
            }).sort((a, b) => b.count - a.count).slice(0, 5);

            setSecurityGroups(groupStats);

        } catch (error) {
            console.error('Error fetching malware logs:', error);
        } finally {
            setLoading(false);
        }
    }, [page, pageSize, filters]);

    const fetchVisualizationData = useCallback(async () => {
        try {
            const activeFilters = Object.keys(filters).filter(key => filters[key]);
            const response = await axios.get(`${API_URL}/api/logs/malware`, {
                params: {
                    page: 0,
                    pageSize: 10000, // Fetch all logs in one request (adjust if needed)
                    filters: activeFilters.join(',')
                }
            });

            const logsWithLocation = response.data.logs.map(log => ({
                ...log,
                id: log._id,
                location: log.location || (log.rawLog?.message && typeof log.rawLog.message === 'string' ?
                    JSON.parse(log.rawLog.message)?.location : null) ||
                    log.rawLog?.location ||
                    'Unknown'
            }));

            // Update visualization data
            setVisualizationLogs(logsWithLocation);

            // Calculate location stats from ALL logs
            const locationCounts = logsWithLocation.reduce((acc, log) => {
                const loc = log.location || 'Unknown';
                acc[loc] = (acc[loc] || 0) + 1;
                return acc;
            }, {});

            const sortedLocations = Object.entries(locationCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5)
                .map(([location, count]) => ({ location, count }));
            setLocationStats(sortedLocations);

            // Calculate security groups from ALL logs
            const groups = new Set();
            logsWithLocation.forEach(log => {
                const logGroups = extractGroups(log.rawLog);
                logGroups.forEach(group => groups.add(group));
            });

            const groupStats = Array.from(groups).map(group => {
                const count = logsWithLocation.filter(log =>
                    extractGroups(log.rawLog).includes(group)
                ).length;
                return { name: group, count };
            }).sort((a, b) => b.count - a.count).slice(0, 5);

            setSecurityGroups(groupStats);

        } catch (error) {
            console.error('Error fetching visualization data:', error);
        }
    }, [filters]);

    useEffect(() => {
        fetchMalwareLogs();
        fetchVisualizationData();
    }, [fetchMalwareLogs, fetchVisualizationData]);

    const handleFilterChange = (event) => {
        setFilters({
            ...filters,
            [event.target.name]: event.target.checked
        });
        setPage(0);
    };

    const handleRefresh = () => {
        fetchMalwareLogs();
    };

    const handleViewLog = (log) => {
        setSelectedLog(log);
        const normalized = parseLogMessage(log);
        setParsedLog(normalized);
        setOpenDialog(true);
    };

    const handleCloseDialog = () => {
        setOpenDialog(false);
        setSelectedLog(null);
    };

    const extractGroups = (rawLog) => {
        try {
            if (typeof rawLog?.message === 'string') {
                try {
                    const parsed = JSON.parse(rawLog.message);
                    return parsed?.rule?.groups || [];
                } catch {
                    return [];
                }
            } else if (rawLog?.message?.rule?.groups) {
                return rawLog.message.rule.groups;
            } else if (rawLog?.rule?.groups) {
                return rawLog.rule.groups;
            }
            return [];
        } catch (error) {
            return [];
        }
    };

    const SecurityGroupsComponent = () => {
        if (securityGroups.length === 0) return null;

        // New color palette for security groups
        const groupColors = ['#3498db', '#1abc9c', '#9b59b6', '#f1c40f', '#e67e22'];

        return (
            <Card
                variant="outlined"
                sx={{
                    mb: 3,
                    p: 2,
                    transition: 'transform 0.3s, box-shadow 0.3s',
                    '&:hover': {
                        transform: 'translateY(-5px)',
                        boxShadow: '0 8px 16px rgba(0,0,0,0.1)'
                    },
                    background: 'linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%)',
                    borderRadius: '10px'
                }}
            >
                <Typography
                    variant="h6"
                    component="h3"
                    gutterBottom
                    sx={{
                        borderBottom: '2px solid #9b59b6',
                        paddingBottom: 1,
                        color: '#2c3e50',
                        fontWeight: 'bold'
                    }}
                >
                    Top Security Groups
                </Typography>
                <ResponsiveContainer width="100%" height={250}>
                    <BarChart
                        data={securityGroups}
                        layout="vertical"
                        margin={{ top: 5, right: 30, left: 80, bottom: 5 }}
                        animationBegin={0}
                        animationDuration={1500}
                        animationEasing="ease-out"
                    >
                        <CartesianGrid strokeDasharray="3 3" stroke="#ccc" />
                        <XAxis
                            type="number"
                            tick={{ fill: '#2c3e50' }}
                            axisLine={{ stroke: '#7f8c8d' }}
                        />
                        <YAxis
                            type="category"
                            dataKey="name"
                            tick={{ fill: '#2c3e50' }}
                            axisLine={{ stroke: '#7f8c8d' }}
                        />
                        <Tooltip
                            contentStyle={{
                                backgroundColor: 'rgba(255, 255, 255, 0.9)',
                                borderRadius: '8px',
                                boxShadow: '0 4px 12px rgba(0,0,0,0.15)'
                            }}
                        />
                        <Legend
                            wrapperStyle={{
                                paddingTop: '10px'
                            }}
                        />
                        <Bar
                            dataKey="count"
                            name="Occurrences"
                            radius={[0, 4, 4, 0]} // Rounded corners
                        >
                            {securityGroups.map((entry, index) => (
                                <Cell
                                    key={`cell-${index}`}
                                    fill={groupColors[index % groupColors.length]}
                                    stroke="rgba(0,0,0,0.1)"
                                    strokeWidth={1}
                                />
                            ))}
                        </Bar>
                    </BarChart>
                </ResponsiveContainer>
            </Card>
        );
    };

    return (
        <Box sx={{ width: '100%', padding: 2 }}>
            <Paper sx={{ width: '100%', padding: 3, mb: 4 }}>
                <Typography variant="h4" component="h1" gutterBottom>
                    Malware Detection Dashboard
                </Typography>
                <Divider sx={{ mb: 3 }} />

                <Grid container spacing={3}>
                    <Grid item xs={12}>
                        <FiltersComponent
                            filters={filters}
                            handleFilterChange={handleFilterChange}
                            handleRefresh={handleRefresh}
                        />
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <TopLocationsComponent locationStats={locationStats} />
                    </Grid>

                    <Grid item xs={12} md={6}>
                        <ThreatLevelComponent logs={visualizationLogs} />
                    </Grid>

                    <Grid item xs={12}>
                        <SecurityGroupsComponent />
                    </Grid>

                    <Grid item xs={12}>
                        <MalwareLogsTable
                            logs={logs}
                            loading={loading}
                            formatTimestamp={formatTimestamp}
                            extractGroups={extractGroups}
                            handleViewLog={handleViewLog}
                            page={page}
                            setPage={setPage}
                            pageSize={pageSize}
                            setPageSize={setPageSize}
                            totalRows={totalRows}
                        />
                    </Grid>
                </Grid>
            </Paper>

            {/* Log Details Dialog */}
            <Dialog
                open={openDialog}
                onClose={handleCloseDialog}
                maxWidth="lg"
                fullWidth
            >
                <DialogTitle sx={{ pb: 1 }}>
                    <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Typography variant="h6">Malware Log Details</Typography>
                        <IconButton edge="end" color="inherit" onClick={handleCloseDialog} aria-label="close">
                            <CloseIcon />
                        </IconButton>
                    </Box>
                </DialogTitle>
                <DialogContent dividers>
                    {parsedLog && <StructuredLogView data={parsedLog} />}
                </DialogContent>
            </Dialog>
        </Box>
    );
};

export default Malware;