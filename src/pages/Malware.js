import React, { useState, useEffect, useCallback } from 'react';
import {Box,Paper,Typography,CircularProgress,FormControl,FormGroup,FormControlLabel,Checkbox,Button, Table, TableBody, TableCell,
     TableContainer, TableHead, TableRow, TablePagination,Chip,Grid,useTheme,useMediaQuery,Card,CardContent,IconButton,Divider
} from '@mui/material';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import axios from 'axios';
import { API_URL } from '../config';
import CloseIcon from '@mui/icons-material/Close';
import RefreshIcon from '@mui/icons-material/Refresh';
import VisibilityIcon from '@mui/icons-material/Visibility';
import { Dialog, DialogTitle, DialogContent } from '@mui/material';
import { StructuredLogView, parseLogMessage } from '../utils/normalizeLogs';
import { 
    PieChart, 
    Pie, 
    Cell, 
    BarChart, 
    Bar, 
    XAxis, 
    YAxis, 
    CartesianGrid, 
    Tooltip, 
    Legend, 
    ResponsiveContainer 
} from 'recharts';

// Sub-components
const FiltersComponent = ({ filters, handleFilterChange, handleRefresh }) => {
    return (
        <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
            <Typography variant="h6" component="h3" gutterBottom>
                Filters
            </Typography>
            <FormControl component="fieldset" sx={{ width: '100%' }}>
                <FormGroup row>
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.virustotal}
                                onChange={handleFilterChange}
                                name="virustotal"
                                color="primary"
                            />
                        }
                        label="VirusTotal"
                    />
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.yara}
                                onChange={handleFilterChange}
                                name="yara"
                                color="primary"
                            />
                        }
                        label="YARA"
                    />
                    <FormControlLabel
                        control={
                            <Checkbox
                                checked={filters.rootcheck}
                                onChange={handleFilterChange}
                                name="rootcheck"
                                color="primary"
                            />
                        }
                        label="Rootcheck"
                    />
                    <Button
                        variant="contained"
                        onClick={handleRefresh}
                        sx={{ ml: 2 }}
                        startIcon={<RefreshIcon />}
                    >
                        Refresh
                    </Button>
                </FormGroup>
            </FormControl>
        </Card>
    );
};

const TopLocationsComponent = ({ locationStats }) => {
    const theme = useTheme();
    
    const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#A28DFF'];
    
    const pieData = locationStats.map(item => ({
        name: item.location,
        value: item.count
    }));

    return (
        <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
            <Typography variant="h6" component="h3" gutterBottom>
                Top Malware Locations
            </Typography>
            <Grid container spacing={2}>
                <Grid item xs={12} md={5}>
                    <Box sx={{ p: 1 }}>
                        {locationStats.map((stat, index) => (
                            <Chip 
                                key={index}
                                label={`${stat.location}: ${stat.count}`}
                                variant="outlined"
                                color="primary"
                                sx={{ m: 0.5 }}
                            />
                        ))}
                    </Box>
                </Grid>
                <Grid item xs={12} md={7}>
                    {locationStats.length > 0 && (
                        <ResponsiveContainer width="100%" height={200}>
                            <PieChart>
                                <Pie
                                    data={pieData}
                                    cx="50%"
                                    cy="50%"
                                    labelLine={false}
                                    outerRadius={80}
                                    fill="#8884d8"
                                    dataKey="value"
                                    label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
                                >
                                    {pieData.map((entry, index) => (
                                        <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />
                                    ))}
                                </Pie>
                                <Tooltip formatter={(value) => [`Count: ${value}`, 'Occurrences']} />
                            </PieChart>
                        </ResponsiveContainer>
                    )}
                </Grid>
            </Grid>
        </Card>
    );
};

const ThreatLevelComponent = ({ logs }) => {
    // Calculate threat levels from logs
    const threatLevels = logs.reduce((acc, log) => {
        const level = log.rule?.level || 0;
        let severity = "Low";
        if (level >= 10) severity = "Critical";
        else if (level >= 7) severity = "High";
        else if (level >= 4) severity = "Medium";
        
        acc[severity] = (acc[severity] || 0) + 1;
        return acc;
    }, {});
    
    const threatData = Object.keys(threatLevels).map(key => ({
        name: key,
        count: threatLevels[key]
    }));
    
    const COLORS = {
        Low: '#47B39C',
        Medium: '#FFC154',
        High: '#EC6B56',
        Critical: '#B31E6F'
    };

    return (
        <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
            <Typography variant="h6" component="h3" gutterBottom>
                Threat Level Distribution
            </Typography>
            <ResponsiveContainer width="100%" height={250}>
                <BarChart data={threatData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Legend />
                    <Bar dataKey="count" name="Number of Threats">
                        {threatData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={COLORS[entry.name] || '#8884d8'} />
                        ))}
                    </Bar>
                </BarChart>
            </ResponsiveContainer>
        </Card>
    );
};

const MalwareLogsTable = ({ 
    logs, 
    loading, 
    formatTimestamp, 
    extractGroups, 
    handleViewLog, 
    page, 
    setPage, 
    pageSize, 
    setPageSize, 
    totalRows 
}) => {
    return (
        <Card variant="outlined" sx={{ mb: 3 }}>
            <CardContent>
                <Typography variant="h6" component="h3" gutterBottom>
                    Malware Detection Logs
                </Typography>
                <Box style={{ width: '100%', overflow: 'auto' }}>
                    {loading ? (
                        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4, mb: 4 }}>
                            <CircularProgress />
                        </Box>
                    ) : (
                        <TableContainer sx={{ maxHeight: 400 }}>
                            <Table size="small" stickyHeader>
                                <TableHead>
                                    <TableRow>
                                        <TableCell>Timestamp</TableCell>
                                        <TableCell>Agent</TableCell>
                                        <TableCell>Level</TableCell>
                                        <TableCell>Description</TableCell>
                                        <TableCell>Location</TableCell>
                                        <TableCell>Security Groups</TableCell>
                                        <TableCell>Action</TableCell>
                                    </TableRow>
                                </TableHead>
                                <TableBody>
                                    {logs.map((log) => (
                                        <TableRow key={log.id}>
                                            <TableCell>{formatTimestamp(log.timestamp)}</TableCell>
                                            <TableCell>{log.agent?.name || 'Unknown'}</TableCell>
                                            <TableCell>
                                                <Chip 
                                                    label={log.rule?.level || '0'} 
                                                    size="small"
                                                    color={
                                                        log.rule?.level >= 10 ? "error" :
                                                        log.rule?.level >= 7 ? "warning" :
                                                        "default"
                                                    }
                                                />
                                            </TableCell>
                                            <TableCell sx={{ maxWidth: 250, overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                                                {log.rule?.description || 'No description'}
                                            </TableCell>
                                            <TableCell>{log.location || 'Unknown'}</TableCell>
                                            <TableCell>{extractGroups(log.rawLog).join(', ')}</TableCell>
                                            <TableCell>
                                                <IconButton
                                                    size="small"
                                                    color="primary"
                                                    onClick={() => handleViewLog(log)}
                                                >
                                                    <VisibilityIcon fontSize="small" />
                                                </IconButton>
                                            </TableCell>
                                        </TableRow>
                                    ))}
                                </TableBody>
                            </Table>
                            <TablePagination
                                component="div"
                                count={totalRows}
                                page={page}
                                onPageChange={(event, newPage) => setPage(newPage)}
                                rowsPerPage={pageSize}
                                onRowsPerPageChange={(event) => setPageSize(parseInt(event.target.value, 10))}
                                rowsPerPageOptions={[10, 25, 50, 100]}
                            />
                        </TableContainer>
                    )}
                </Box>
            </CardContent>
        </Card>
    );
};

// Main Component
const Malware = () => {
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('md'));

    const [logs, setLogs] = useState([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState({
        virustotal: true,
        yara: true,
        rootcheck: true
    });
    const [page, setPage] = useState(0);
    const [pageSize, setPageSize] = useState(10);
    const [totalRows, setTotalRows] = useState(0);
    const [selectedLog, setSelectedLog] = useState(null);
    const [openDialog, setOpenDialog] = useState(false);
    const [parsedLog, setParsedLog] = useState(null);
    const [locationStats, setLocationStats] = useState([]);
    const [securityGroups, setSecurityGroups] = useState([]);

    // Format timestamp to Indian format (Asia/Kolkata)
    const formatTimestamp = (timestamp) => {
        if (!timestamp) return 'N/A';
        
        // Create date with time zone conversion
        const date = new Date(timestamp);
        
        // Format for Indian timezone (IST, UTC+5:30)
        const options = {
            timeZone: 'Asia/Kolkata',
            year: 'numeric',
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
            hour12: true
        };
        
        return new Intl.DateTimeFormat('en-IN', options).format(date);
    };

    const fetchMalwareLogs = useCallback(async () => {
        setLoading(true);
        try {
            const activeFilters = Object.keys(filters).filter(key => filters[key]);

            const response = await axios.get(`${API_URL}/api/logs/malware`, {
                params: {
                    page,
                    pageSize,
                    filters: activeFilters.join(',')
                }
            });

            const logsWithLocation = response.data.logs.map(log => ({
                ...log,
                id: log._id,
                // Extract location - prefer top level, then from rawLog.message
                location: log.location || 
                         (log.rawLog?.message && typeof log.rawLog.message === 'string' ? 
                          JSON.parse(log.rawLog.message)?.location : null) ||
                         log.rawLog?.location ||
                         'Unknown'
            }));

            setLogs(logsWithLocation);
            setTotalRows(response.data.total);

            // Calculate location statistics
            const locationCounts = logsWithLocation.reduce((acc, log) => {
                const loc = log.location || 'Unknown';
                acc[loc] = (acc[loc] || 0) + 1;
                return acc;
            }, {});

            const sortedLocations = Object.entries(locationCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 5) // Top 5 locations
                .map(([location, count]) => ({ location, count }));

            setLocationStats(sortedLocations);

            // Extract and calculate security groups
            const groups = new Set();
            logsWithLocation.forEach(log => {
                const logGroups = extractGroups(log.rawLog);
                logGroups.forEach(group => groups.add(group));
            });
            
            const groupStats = Array.from(groups).map(group => {
                const count = logsWithLocation.filter(log => 
                    extractGroups(log.rawLog).includes(group)
                ).length;
                return { name: group, count };
            }).sort((a, b) => b.count - a.count).slice(0, 5);
            
            setSecurityGroups(groupStats);

        } catch (error) {
            console.error('Error fetching malware logs:', error);
        } finally {
            setLoading(false);
        }
    }, [page, pageSize, filters]);

    useEffect(() => {
        fetchMalwareLogs();
    }, [fetchMalwareLogs]);

    const handleFilterChange = (event) => {
        setFilters({
            ...filters,
            [event.target.name]: event.target.checked
        });
        setPage(0);
    };

    const handleRefresh = () => {
        fetchMalwareLogs();
    };

    const handleViewLog = (log) => {
        setSelectedLog(log);
        const normalized = parseLogMessage(log);
        setParsedLog(normalized);
        setOpenDialog(true);
    };

    const handleCloseDialog = () => {
        setOpenDialog(false);
        setSelectedLog(null);
    };

    const extractGroups = (rawLog) => {
        try {
            if (typeof rawLog?.message === 'string') {
                try {
                    const parsed = JSON.parse(rawLog.message);
                    return parsed?.rule?.groups || [];
                } catch {
                    return [];
                }
            } else if (rawLog?.message?.rule?.groups) {
                return rawLog.message.rule.groups;
            } else if (rawLog?.rule?.groups) {
                return rawLog.rule.groups;
            }
            return [];
        } catch (error) {
            return [];
        }
    };

    const SecurityGroupsComponent = () => {
        if (securityGroups.length === 0) return null;
        
        return (
            <Card variant="outlined" sx={{ mb: 3, p: 2 }}>
                <Typography variant="h6" component="h3" gutterBottom>
                    Top Security Groups
                </Typography>
                <ResponsiveContainer width="100%" height={250}>
                    <BarChart
                        data={securityGroups}
                        layout="vertical"
                        margin={{ top: 5, right: 30, left: 80, bottom: 5 }}
                    >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis type="number" />
                        <YAxis type="category" dataKey="name" />
                        <Tooltip />
                        <Legend />
                        <Bar dataKey="count" name="Occurrences" fill="#8884d8" />
                    </BarChart>
                </ResponsiveContainer>
            </Card>
        );
    };

    return (
        <Box sx={{ width: '100%', padding: 2 }}>
            <Paper sx={{ width: '100%', padding: 3, mb: 4 }}>
                <Typography variant="h4" component="h1" gutterBottom>
                    Malware Detection Dashboard
                </Typography>
                <Divider sx={{ mb: 3 }} />

                <Grid container spacing={3}>
                    <Grid item xs={12}>
                        <FiltersComponent 
                            filters={filters} 
                            handleFilterChange={handleFilterChange} 
                            handleRefresh={handleRefresh} 
                        />
                    </Grid>
                    
                    <Grid item xs={12} md={6}>
                        <TopLocationsComponent locationStats={locationStats} />
                    </Grid>
                    
                    <Grid item xs={12} md={6}>
                        <ThreatLevelComponent logs={logs} />
                    </Grid>
                    
                    <Grid item xs={12}>
                        <SecurityGroupsComponent />
                    </Grid>
                    
                    <Grid item xs={12}>
                        <MalwareLogsTable
                            logs={logs}
                            loading={loading}
                            formatTimestamp={formatTimestamp}
                            extractGroups={extractGroups}
                            handleViewLog={handleViewLog}
                            page={page}
                            setPage={setPage}
                            pageSize={pageSize}
                            setPageSize={setPageSize}
                            totalRows={totalRows}
                        />
                    </Grid>
                </Grid>
            </Paper>
            
            {/* Log Details Dialog */}
            <Dialog
                open={openDialog}
                onClose={handleCloseDialog}
                maxWidth="lg"
                fullWidth
            >
                <DialogTitle sx={{ pb: 1 }}>
                    <Box display="flex" justifyContent="space-between" alignItems="center">
                        <Typography variant="h6">Malware Log Details</Typography>
                        <IconButton edge="end" color="inherit" onClick={handleCloseDialog} aria-label="close">
                            <CloseIcon />
                        </IconButton>
                    </Box>
                </DialogTitle>
                <DialogContent dividers>
                    {parsedLog && <StructuredLogView data={parsedLog} />}
                </DialogContent>
            </Dialog>
        </Box>
    );
};

export default Malware;